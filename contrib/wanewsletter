#!/usr/bin/php
<?php
/**
 * Copyright (c) 2002-2006 Aurélien Maille
 * 
 * This file is part of Wanewsletter.
 * 
 * Wanewsletter is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version.
 * 
 * Wanewsletter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Wanewsletter; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * 
 * @package Wanewsletter
 * @author  Bobe <wascripts@phpcodeur.net>
 * @link    http://phpcodeur.net/wascripts/wanewsletter/
 * @license http://www.gnu.org/copyleft/gpl.html  GNU General Public License
 * @version $Id$
 * 
 * @status experimental
 */

echo "This script has been disabled for security reason\n";
exit(0);

define('IN_NEWSLETTER',  true);
define('IN_COMMANDLINE', true);
define('WA_ROOTDIR',     '..');

//
// PHP CLI ne change pas le répertoire courant pour celui du script
//
if( php_sapi_name() == 'cli' )
{
	chdir(dirname(__FILE__));
}
else
{
	//
	// PHP en mode CGI ne rend pas disponible directement les variables
	// $argv et $argc si register_globals est sur Off
	//
	$argv = $_SERVER['argv'];
	$argc = $_SERVER['argc'];
}

if( preg_match('/\.UTF-?8/i', getenv('LANG')) ) // Au cas où le terminal utilise l'encodage utf-8
{
	function convert_output($data)
	{
		return wan_utf8_encode($data);
	}
	
	ob_start('convert_output', 2);
}

require WA_ROOTDIR . '/start.php';

load_settings();

$argv[0] = basename($argv[0]);
$version = WA_VERSION;

$process_send = false;

if( $argc == 1 ) // Aucun argument fourni
{
	echo "Usage: $argv[0] [OPTION]...\n";
	echo "Pour en savoir davantage, faites: « $argv[0] --help ».\n";
	exit(0);
}

for( $i = 1; $i < $argc; $i++ )
{
	//
	// Version du script et de PHP et SAPI utilisé
	//
	if( $argv[$i] == '--version' || $argv[$i] == '-v' )
	{
		echo "Wanewsletter $version with PHP " . phpversion() . " (" . php_sapi_name() . ")\n";
		exit(0);
	}
	
	//
	// Licence de Wanewsletter
	//
	else if( $argv[$i] == '--license' )
	{
		echo <<<WANSHELL
Wanewsletter $version
Copyright (c) 2002-2006 phpCodeur

Wanewsletter est un logiciel libre; vous pouvez le redistribuer ou le
modifier selon les termes de la License Publique Générale de GNU, publiée
par la Free Software Foundation; soit la version 2 de la Licence ou,
soit (selon vos préférences) toute version ultérieure.

Wanewsletter est distribué dans l'espoir qu'il soit utile,
mais AUCUNE garantie n'est donnée tant pour des raisons COMMERCIALES que
pour RÉPONDRE À UN BESOIN PARTICULIER.  Consultez la Licence
Publique Générale de GNU pour plus de détails.

Vous devriez avoir reçu copie de la Licence Publique Générale de GNU
avec Wanewsletter; sinon, écrivez à la Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


WANSHELL;
		
		exit(0);
	}
	
	//
	// Aide succinte d'utilisation en ligne de commande
	//
	else if( $argv[$i] == '--help' || $argv[$i] == '-h' )
	{
		echo <<<WANSHELL
Usage: $argv[0] [options]

Envois:
  -pNUM, --process-send=NUM  Lance un envoi
  -a, --all                  Ignorer les réglages d'envoi par flôt

Divers:
  -h, --help     Affiche la présente aide
  -v, --version  Affiche les informations de version
      --license  Affiche les informations de licence


WANSHELL;
		exit(0);
	}
	
	//
	// Lancement d'un flôt d'envoi
	//
	else if( preg_match('/^-(?:-process-send=|p)([0-9]+)$/', $argv[$i], $match) )
	{
		$process_send = true;
		$liste_id = $match[1];
	}
	
	//
	// Effectuer tous les envois d'un coup
	//
	else if( $argv[$i] == '--all' || $argv[$i] == '-a' )
	{
		$nl_config['emails_sended'] = 0;
	}
	
	else if( preg_match('/^--import-(mail|news)(?:=(.+))?$/', $argv[$i], $match) )
	{
		echo "This feature is not yet implemented!\n";
		exit(0);
	}
}

if( $process_send == true )
{
	require WA_ROOTDIR . '/includes/engine_send.php';
	
	$sql = 'SELECT liste_id, liste_format, sender_email, liste_alias, limitevalidate,
			liste_name, form_url, return_email, liste_sig, use_cron, confirm_subscribe
		FROM ' . LISTE_TABLE . ' 
		WHERE liste_id = ' . $liste_id;
	if( !($result = $db->query($sql)) )
	{
		trigger_error('Impossible de récupérer les informations sur cette liste', CRITICAL_ERROR);
	}
	
	if( !($listdata = $db->fetch_array($result)) )
	{
		trigger_error('Unknown_list', CRITICAL_ERROR);
	}
	
	$sql = "SELECT log_id, log_subject, log_body_text, log_body_html, log_status
		FROM " . LOG_TABLE . "
		WHERE liste_id = $listdata[liste_id]
			AND log_status = " . STATUS_STANDBY;
	if( !($result = $db->query($sql, 0, 1)) ) // on récupère le dernier log en statut d'envoi
	{
		trigger_error('Impossible d\'obtenir les données sur ce log', CRITICAL_ERROR);
	}
	
	if( !($logdata = $db->fetch_array($result)) )
	{
		echo $lang['Message']['No_log_to_send'] . "\n";
		exit(0);
	}
	
	$sql = "SELECT jf.file_id, jf.file_real_name, jf.file_physical_name, jf.file_size, jf.file_mimetype
		FROM " . JOINED_FILES_TABLE . " AS jf
			INNER JOIN " . LOG_FILES_TABLE . " AS lf ON lf.file_id = jf.file_id
			INNER JOIN " . LOG_TABLE . " AS l ON l.log_id = lf.log_id
				AND l.liste_id = $listdata[liste_id]
				AND l.log_id   = $logdata[log_id]
		ORDER BY jf.file_real_name ASC";
	if( !($result = $db->query($sql)) )
	{
		trigger_error('Impossible d\'obtenir la liste des fichiers joints', CRITICAL_ERROR);
	}
	
	$logdata['joined_files'] = $db->fetch_rowset($result);
	
	//
	// On lance l'envoi
	//
	$message = launch_sending($listdata, $logdata);
	
	echo strip_tags($message) . "\n";
	exit(0);
}

echo "Bienvenue dans l'interface Wanewsletter en ligne de commande!\n";

exit(0);


